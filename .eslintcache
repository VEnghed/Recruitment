[{"C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\index.js":"1","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\App.js":"2","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\success.js":"3","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\header\\header.js":"4","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\register\\register.js":"5","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\login\\login.js":"6","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\applicationpageview\\applicationpage.js":"7","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\recruiterpage\\recruiter.js":"8"},{"size":230,"mtime":1612449121661,"results":"9","hashOfConfig":"10"},{"size":1068,"mtime":1614259629885,"results":"11","hashOfConfig":"10"},{"size":189,"mtime":1612868104622,"results":"12","hashOfConfig":"10"},{"size":396,"mtime":1612951776598,"results":"13","hashOfConfig":"10"},{"size":3285,"mtime":1614615332853,"results":"14","hashOfConfig":"10"},{"size":1434,"mtime":1614263364903,"results":"15","hashOfConfig":"10"},{"size":11979,"mtime":1614604806351,"results":"16","hashOfConfig":"10"},{"size":4352,"mtime":1614613069034,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"vn72k2",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\index.js",[],["40","41"],"C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\App.js",[],"C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\success.js",[],"C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\header\\header.js",["42"],"import './header.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n/**\r\n * An reusable header for all pages,\r\n * Sends the user back to the start page on click\r\n * @returns the header component\r\n */\r\nfunction Header() {\r\n    return (\r\n        <header className=\"header\">\r\n            <h2 onClick={() => window.location = '/'}>Recruitment</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\register\\register.js",[],"C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\login\\login.js",["43"],"import { useState } from \"react\";\r\nimport \"./login.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Login() {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  function Tellem() {\r\n    let data = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n\r\n    fetch(\"/user/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        window.localStorage.setItem(\"token\", data.accessToken);\r\n        if (data.role == 2) {\r\n          window.location = \"/application\";\r\n        } else {\r\n          window.location = \"/recruiter/search\";\r\n        }\r\n      })\r\n      .catch(console.log);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        Username\r\n        <input\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(event) => setUsername(event.target.value)}\r\n        ></input>\r\n      </div>\r\n      <div>\r\n        Password\r\n        <input\r\n          type=\"text\"\r\n          value={password}\r\n          onChange={(event) => setPassword(event.target.value)}\r\n        ></input>\r\n      </div>\r\n      <button onClick={Tellem}>Submit</button>\r\n      <Link to=\"/register\">Register</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\applicationpageview\\applicationpage.js",["44"],"import './applicationpage.css';\r\nimport React, { useState } from \"react\";\r\n\r\n//global arrays use to store user input, probably not a great way to do it\r\nlet competenceArray = [];\r\nlet availabilityArray = [];\r\n\r\n/**\r\n * @description Function for the application page, generates all necessary frontend\r\n * @param {*} props used for sending data\r\n * @returns A react component with frontend HTML.\r\n */\r\nfunction Applicationpage(props) {\r\n    \r\n    let [competenceList, setCompetenceList] = useState([]);\r\n    let [comp, set_comp] = useState(\"\");\r\n    let [yearsexp, set_yearsexp] = useState(\"\");\r\n    \r\n    let [availabilityList, setAvailabilityList] = useState([]);\r\n    let [from_date, set_from_date] = useState(\"\");\r\n    let [to_date, set_to_date] = useState(\"\");\r\n    let myToken = window.localStorage.getItem(\"token\")\r\n\r\n    //For showing success- and error-messages\r\n    let [msgToUser, setMsgToUser] = useState(\"\");\r\n    \r\n    /**\r\n     * @description Adds a competence to the array for competencies with the right format\r\n     * @param {*} comp The competence\r\n     * @param {*} exp Years experience\r\n     */\r\n    function addCompetenceToArr (comp, exp) {\r\n        //let newElem = {\"competence\" : comp, \"yearsExperience\": exp};\r\n        let id;\r\n        if (comp === \"Korvgrillning\")\r\n            id = 1;\r\n        else \r\n            id = 2;\r\n\r\n        let newElem = {competence_id: id, competence: comp, years_experience: exp};\r\n        competenceArray.push(newElem);\r\n    } \r\n\r\n    /**\r\n     * @description Adds an availability element to the availability array\r\n     * @param {*} avFrom The available from date\r\n     * @param {*} avTo The available to date\r\n     */\r\n    function addAvailabilityToArr (avFrom, avTo) {\r\n        let newElem = {\"availableFrom\":avFrom, \"availableTo\":avTo};\r\n        availabilityArray.push(newElem);\r\n    }\r\n\r\n    /**\r\n     * @description Function for adding a react component\r\n     * @param prop Used for sending variables that can be used inside this function\r\n     */\r\n    const Av = (prop) => {\r\n        let from = prop.from_date\r\n        let to = prop.to_date\r\n        return (\r\n            <div className=\"Availability\">\r\n                <p>From: {from} To: {to}</p>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    /**\r\n     * @description function for adding a react component called competence\r\n     * @param prop Used to send variables to this component that can be used inside it\r\n     */\r\n    const Comp = (prop) => {\r\n        let cmp = prop.compet;\r\n        let yearsexper = prop.exper;\r\n\r\n        return (\r\n            <div className=\"Competence\">\r\n                <p>Competence: {cmp} Years experience: {yearsexper}</p>\r\n            </div>\r\n        );\r\n    };\r\n    \r\n    /**\r\n     * @description Adds another availability component to the page, availability array, and availabilyList state\r\n     * @param {*} event The event that triggers this function\r\n     */   \r\n    function onAddAvailabilityClick() {\r\n        \r\n        if(from_date === \"\" && to_date === \"\") {\r\n            setMsgToUser(\"Please choose both from and to dates\")\r\n            return;\r\n        }\r\n        else if(from_date === \"\") {\r\n            setMsgToUser(\"Please choose from date\");\r\n            return;\r\n        }\r\n        else if(to_date === \"\") {    \r\n            setMsgToUser(\"Please choose to date\");\r\n            return;\r\n        }\r\n        \r\n        const newAvailability = <Av from_date={from_date} to_date={to_date} identifier={availabilityList.length} key={availabilityList.length}/>\r\n        availabilityList = [...availabilityList, newAvailability]\r\n        setAvailabilityList(availabilityList);\r\n        addAvailabilityToArr(from_date, to_date);\r\n\r\n        set_from_date(\"\");\r\n        set_to_date(\"\");\r\n        setMsgToUser(\"\");\r\n    }\r\n\r\n\r\n    /**\r\n     * @description Adds another competence component to the page, competence array and competenceList state\r\n     * @param {*} event The event that triggers this function\r\n     */\r\n    function onAddCompetenceClick() {\r\n        if(comp === \"\" && yearsexp === \"\") {\r\n            setMsgToUser(\"Please choose both competence and years experience\")\r\n            return;\r\n        }\r\n        else if(yearsexp === \"\") {\r\n            setMsgToUser(\"Please choose years experience\");\r\n            return;\r\n        }\r\n        else if(comp === \"\") {    \r\n            setMsgToUser(\"Please choose competence\");\r\n            return;\r\n        }\r\n\r\n        const newCompetence = <Comp compet={comp} exper={yearsexp} identifier={competenceList.length} key={competenceList.length}></Comp>\r\n        competenceList = [...competenceList, newCompetence]\r\n        addCompetenceToArr(comp, yearsexp);\r\n        setCompetenceList(competenceList);\r\n        set_comp(\"\");\r\n        set_yearsexp(\"\");\r\n        setMsgToUser(\"\");\r\n    }\r\n\r\n    /**\r\n     * @description This function sends application data (json format) to the server and handles the server response \r\n     * @param applicationData The data to send\r\n     */\r\n    function sendApplication(applicationData) {\r\n       /*  let application =  {availabilities: applicationData.availabilityArray, \r\n                            competencies: applicationData.competenceArray, \r\n                            token: applicationData.token\r\n        }; */\r\n        console.log(\"Sending application: \" + JSON.stringify(applicationData))\r\n        fetch('/application/post', {\r\n            method: 'POST', \r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + applicationData.token\r\n            },\r\n            body: JSON.stringify(applicationData)\r\n        }).then(response => {\r\n            //If something went wrong with saving application\r\n            if(response.status === 500) {   // internal error\r\n                console.log(\"internal error\")\r\n                setMsgToUser(\"Could not save application, internal server error, please try again\")\r\n                \r\n            } \r\n            else if(response.status === 200) {    \r\n                console.log(\"Success\")\r\n                setMsgToUser(\"Application saved\")\r\n            }\r\n            else if(response.status === 400) {\r\n                console.log(\"Wrong input\")\r\n                //console.log(response)\r\n                let errorsInRes = response.statusText;\r\n                console.log(errorsInRes);\r\n                setMsgToUser(\"Could not save application\" + errorsInRes)\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Gathers data from user input and uses it to send application to server with the sendApplication function.\r\n     * Uses availability, competence arrays\r\n     */\r\n    function onSendApplicationClick() {\r\n        //gather data\r\n        //remove applicant below send jwt token instead\r\n        //let token = window.localStorage.getItem('token');\r\n        let tokenVal = \"mak\";\r\n        let applicationData = {availabilities: availabilityArray, competencies: competenceArray, token: tokenVal};\r\n        if (availabilityArray.length === 0 || competenceArray.length === 0) {\r\n            setMsgToUser(\"Please add competencies and/or availabilities\");\r\n            return;\r\n        } \r\n        sendApplication(applicationData);\r\n    }\r\n\r\n    /**\r\n     * @description Reset/delete all data in application by clearing states and arrays.\r\n     */\r\n    function onResetApplicationClick() {\r\n        setCompetenceList([]);\r\n        set_comp(\"\");\r\n        set_yearsexp(\"\");\r\n        setAvailabilityList([]);\r\n        set_from_date(\"\");\r\n        set_to_date(\"\");\r\n        \r\n        \r\n        competenceArray = [];\r\n        availabilityArray = [];\r\n        setMsgToUser(\"Application has been reset\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"applicationpage\">\r\n            \r\n            <header className=\"applicationpage-header\"> {/* use the same header for every page so replace this?? */}\r\n                <p>Preliminary application page!</p>\r\n            </header>\r\n            \r\n            <div id=\"applicationpage-content\">    \r\n                \r\n                <div id=\"application\">\r\n                    <h2>Application</h2>\r\n                    <div id=\"application-items\">\r\n                        \r\n                        <div id=\"competencies\">\r\n                            <h3>Competencies</h3>\r\n                            {/* Competence list goes here! */}\r\n                            {competenceList}\r\n                        </div>\r\n                        <div id=\"availabilities\">\r\n                            <h3>Availabilities</h3>\r\n                            {availabilityList}\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div id=\"application-inputs\">\r\n                    <div id=\"competence-stuff\">\r\n                        \r\n                        <div id=\"competenceInputs\">\r\n                            <div id=\"competenceSelector\">\r\n                                <p>Competence: </p>\r\n                                <select value={comp} \r\n                                    onChange={event => set_comp(event.target.value)} \r\n                                    name=\"competency-select\" className=\"competency-select\">\r\n                                    <option value=\"\">--Välj ett alternativ--</option>\r\n                                    {/*Remove hardcoded alternatives, fetch from database */}\r\n                                    <option value=\"Korvgrillning\">Korvgrillning</option>\r\n                                    <option value=\"Städning\">Städning</option>\r\n                                </select>\r\n                            </div>\r\n                            <div id=\"yearsExperience\">\r\n                                <p>Years of experience: </p>\r\n                                {/* Ensure that only numbers can be entered here! */}\r\n                                <input value={yearsexp} type=\"number\" min=\"0\" max=\"99\" className=\"experience\" \r\n                                    onChange={event => set_yearsexp(event.target.value)}>\r\n                                </input>\r\n                            </div>\r\n                        </div>\r\n                        <button  onClick={() => onAddCompetenceClick()}>Add competence</button>\r\n                    </div>\r\n                    <div id=\"availability-stuff\">\r\n                        {/*Make sure available-from is before available-to somehow*/}\r\n                        <div id=\"availabilitySelect\">\r\n                            <p>Available from:</p>\r\n                            <input value={from_date} \r\n                                onChange={event => set_from_date(event.target.value)} \r\n                                type=\"date\" className=\"available-from\" name=\"available-from\"\r\n                                min=\"2021-02-01\" max=\"2030-12-31\">\r\n                            </input>\r\n                                \r\n                            <p>Available to:</p>\r\n                            <input value={to_date} \r\n                                onChange={event => set_to_date(event.target.value)} \r\n                                type=\"date\" className=\"available-to\" name=\"available-to\"\r\n                                min=\"2021-02-01\" max=\"2040-12-31\">\r\n                            </input>\r\n                        </div>\r\n                        <button onClick={() => onAddAvailabilityClick()}>Add availability</button>\r\n                    </div>\r\n                </div>\r\n                <p id=\"msgToUser\">{msgToUser}</p>\r\n                <div id=\"reset-application\">\r\n                <button onClick={() => onResetApplicationClick()}>Reset application</button>\r\n                </div>\r\n                <div id=\"send-application\">\r\n                    <button onClick={() => onSendApplicationClick()}>Send application</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Applicationpage;","C:\\Users\\Abyel Tesfay\\Documents\\KTH 2018-2021 programmering\\Recruitment\\src\\components\\recruiterpage\\recruiter.js",["45"],"import './recruiter.css';\r\nimport { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n/**\r\n * the function component that renders the recruitment page,\r\n * lets users list applications based on given parameters.\r\n * @returns a react component rendering the recruitment page\r\n */\r\nfunction Recruiter() {\r\n    const [name, setName] = useState('')\r\n    const [timeperiodfrom, setTimeperiodfrom] = useState('')\r\n    const [timeperiodto, setTimeperiodto] = useState('')\r\n    const [competence, setCompetence] = useState('')\r\n    const [applications, setApplications] = useState()\r\n    const [errorMsg, setErrormsg] = useState('')\r\n\r\n    /**\r\n     * sends a search query to server with\r\n     * given parameters\r\n     */\r\n    function searchApplicants() {\r\n        if(!name || !timeperiodfrom || !timeperiodto || !competence) {      //check if all required fields are filled\r\n            setErrormsg(\"Please fill in all required fields\")\r\n            return;\r\n        }\r\n        \r\n        let data = ({                                   // the query\r\n            name: name,\r\n            timeperiodfrom: timeperiodfrom,\r\n            timeperiodto: timeperiodto,\r\n            competence: competence                    \r\n        })\r\n        console.log(data)\r\n\r\n        fetch('/recruiter/search', {\r\n            method: 'POST', \r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json',\r\n              'Authorization': 'Bearer ' + window.localStorage.getItem(\"token\")   \r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(response => {\r\n            if(response.status === 200) {                    // query is valid \r\n                setErrormsg(\"\")\r\n                response.json().then(result => showApplications(result))\r\n            }\r\n            else if(response.status === 400)                 // bad request\r\n                setErrormsg(response.statusText)\r\n            else if(response.status === 401)                 // invalid authentication\r\n                setErrormsg(response.statusText)\r\n            else if(response.status === 500)                 // internal server error\r\n                setErrormsg(response.statusText)\r\n        }) \r\n    }\r\n\r\n    /**\r\n     * creating elements & putting values\r\n     */\r\n    function showApplications(response) {\r\n       let applications = response.map(application => (\r\n            <li id=\"application\"  key={application.firstname} onClick={ event => goToDetails(event)}>\r\n                {application.firstname + \" \" + application.lastname + \"\\t-\\t\" + application.applicationdate} \r\n            </li>\r\n        ))\r\n        setApplications(applications);\r\n    }\r\n\r\n    /**\r\n     * Go to applicant details with certain applicant\r\n     */\r\n    function goToDetails(evt) {\r\n        let applicant = evt.target.id;\r\n        window.location = \"/details:\" + applicant;\r\n        //return <Redirect to=\"/details\"></Redirect>\r\n    }\r\n\r\n    /**\r\n     * loads more applicants to view\r\n     */\r\n    function loadMoreApplicants() {\r\n        //comming soon\r\n    }\r\n        \r\n    return (\r\n        <div className=\"recruiter-container\">\r\n          <h2 className=\"register-text\" >Recruitment</h2> \r\n          <h4 className=\"errorText\" >{errorMsg}</h4>\r\n          <div className=\"search-bar\">\r\n            <input id=\"name\" type=\"text\" placeholder=\"Name\" value={name} onChange={event => setName(event.target.value)}></input>\r\n            <input id=\"time-period-from\" type=\"text\" placeholder=\"From\" value={timeperiodfrom} onChange={event => setTimeperiodfrom(event.target.value)}></input>\r\n            <input id=\"time-period-to\" type=\"text\" placeholder=\"To\" value={timeperiodto} onChange={event => setTimeperiodto(event.target.value)}></input>\r\n            <input id=\"competence\" type=\"text\" placeholder=\"Competence\" value={competence} onChange={event => setCompetence(event.target.value)}></input>\r\n            <button className=\"search-btn\" onClick={() => searchApplicants()}>Search</button>\r\n          </div>\r\n        <hr></hr>\r\n        <div className=\"search-results\" >\r\n            <ul className=\"search-data\">{applications}</ul>\r\n        </div>\r\n        <button className=\"load-applicants-btn\" onClick={() => loadMoreApplicants()}>Load more applicants</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recruiter;",["46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":14},{"ruleId":"56","severity":1,"message":"57","line":26,"column":23,"nodeType":"58","messageId":"59","endLine":26,"endColumn":25},{"ruleId":"52","severity":1,"message":"60","line":22,"column":9,"nodeType":"54","messageId":"55","endLine":22,"endColumn":16},{"ruleId":"52","severity":1,"message":"61","line":3,"column":10,"nodeType":"54","messageId":"55","endLine":3,"endColumn":18},{"ruleId":"48","replacedBy":"62"},{"ruleId":"50","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'myToken' is assigned a value but never used.","'Redirect' is defined but never used.",["64"],["65"],"no-global-assign","no-unsafe-negation"]