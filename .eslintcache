[{"C:\\Users\\erikb\\Documents\\IV1201 ArkitekturoDesign\\Recruitment\\src\\index.js":"1","C:\\Users\\erikb\\Documents\\IV1201 ArkitekturoDesign\\Recruitment\\src\\App.js":"2","C:\\Users\\erikb\\Documents\\IV1201 ArkitekturoDesign\\Recruitment\\src\\reportWebVitals.js":"3","C:\\Users\\erikb\\Documents\\IV1201 ArkitekturoDesign\\Recruitment\\src\\applicationpageview\\applicationpage.js":"4"},{"size":519,"mtime":1612167534270,"results":"5","hashOfConfig":"6"},{"size":530,"mtime":1612183389037,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1612167534271,"results":"8","hashOfConfig":"6"},{"size":8734,"mtime":1612173502193,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"g8atht",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},"C:\\Users\\erikb\\Documents\\IV1201 ArkitekturoDesign\\Recruitment\\src\\index.js",[],["21","22"],"C:\\Users\\erikb\\Documents\\IV1201 ArkitekturoDesign\\Recruitment\\src\\App.js",[],"C:\\Users\\erikb\\Documents\\IV1201 ArkitekturoDesign\\Recruitment\\src\\reportWebVitals.js",[],"C:\\Users\\erikb\\Documents\\IV1201 ArkitekturoDesign\\Recruitment\\src\\applicationpageview\\applicationpage.js",["23"],"import './applicationpage.css';\r\nimport React, { useState, useRef } from \"react\";\r\nimport ReactDOM from \"react-dom\"; //Not used\r\n\r\n\r\n//global arrays use to store user input, probably not a great way to do it\r\nlet competenceArray = [];\r\nlet availabilityArray = [];\r\n\r\n/**\r\n * \r\n * @param {*} props \r\n */\r\nfunction Applicationpage(props) {\r\n    \r\n    let [competenceList, setCompetenceList] = useState([]);\r\n    let [availabilityList, setAvailabilityList] = useState([]);\r\n    \r\n    \r\n\r\n    function addCompetenceToArr (comp, exp) {\r\n        let newElem = {\"comp\" : comp, \"exp\": exp};\r\n        competenceArray.push(newElem);\r\n    } \r\n    function changeCompArray (id, comp, exp) {\r\n        competenceArray[id] = {\"comp\":comp, \"exp\":exp}\r\n        console.log(competenceArray);\r\n    }\r\n\r\n    function addAvailabilityToArr (avFrom, avTo) {\r\n        let newElem = {\"avFrom\":avFrom, \"avTo\":avTo};\r\n        availabilityArray.push(newElem);\r\n    }\r\n    function changeAvArray (id, avFrom, avTo) {\r\n        availabilityArray[id] = {\"avFrom\":avFrom, \"avTo\":avTo};\r\n        console.log(availabilityArray);\r\n    }\r\n\r\n    const textInput = useRef(null);\r\n    \r\n\r\n    /**\r\n     * function for adding a react component\r\n     */\r\n    const Competence = (props) => {\r\n        const [competence, setCompetence] = useState('')\r\n        const [yearsExperience, setYearsExperience] = useState('')\r\n        /**\r\n         * \r\n         * @param {*} stateVal \r\n         * @param {*} identifier \r\n         * @param {*} comp \r\n         * @param {*} exp \r\n         */\r\n        function changeCompetence(stateVal, identifier, comp, exp) {\r\n            setCompetence(stateVal);\r\n            changeCompArray(identifier, comp, exp);\r\n        };\r\n        \r\n        /**\r\n         * \r\n         * @param {*} stateVal \r\n         * @param {*} identifier \r\n         * @param {*} comp \r\n         * @param {*} exp \r\n         */\r\n        function changeYearsExperience(stateVal, identifier, comp, exp) {\r\n            setYearsExperience(stateVal);\r\n            changeCompArray(identifier, comp, exp);\r\n        }\r\n        return (\r\n            <div className=\"Competence\">\r\n                <p>Choose competence:</p>\r\n                    <select value={competence} \r\n                        onChange={event => changeCompetence(event.target.value, \r\n                                                        props.identifier, \r\n                                                        event.target.value, \r\n                                                        yearsExperience)} \r\n                    name=\"competency-select\" className=\"competency-select\">\r\n                        <option value=\"\">--Välj ett alternativ--</option>\r\n                        {/*Remove hardcoded alternatives, fetch from database */}\r\n                        <option value=\"Korvgrillning\">Korvgrillning</option>\r\n                        <option value=\"Städning\">Städning</option>\r\n                    </select>\r\n                    <div className=\"yearsExperience\">\r\n                        <p>Years of experience</p>\r\n                        {/* Ensure that only numbers can be entered here! */}\r\n                        <input value={yearsExperience} type=\"number\" className=\"experience\" \r\n                            onChange={event => changeYearsExperience(event.target.value, \r\n                                                                    props.identifier, \r\n                                                                    competence, \r\n                                                                    event.target.value)}>\r\n                        </input>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //Add another competence\r\n    const onAddCompetenceClick = event => {\r\n        //Do not add too many competencies\r\n        if(competenceList.length <= 2) {\r\n            const newCompetence = <Competence identifier={competenceList.length} key={competenceList.length}/>\r\n            competenceList = [...competenceList, newCompetence]\r\n            \r\n            addCompetenceToArr(\"\", \"\");\r\n            setCompetenceList(competenceList);\r\n            //setCompetenceList(competenceList.concat(<Competence key={competenceList.length} />));\r\n        }        \r\n    };\r\n\r\n    /**\r\n     * function for adding a react component\r\n     */\r\n    const Availability = (props) => {\r\n        const [availableTo, setAvailableTo] = useState('')\r\n        const [availableFrom, setAvailableFrom] = useState('')\r\n        \r\n        function changeAvFrom(stateVal, identifier, avFrom) {\r\n            setAvailableFrom(stateVal);\r\n            changeAvArray(identifier, avFrom, availableTo);\r\n        }\r\n        function changeAvTo(stateVal, identifier, avTo) {\r\n            setAvailableTo(stateVal);\r\n            changeAvArray(identifier, availableFrom, avTo);\r\n        }\r\n        return (\r\n            <div className=\"Availability\">\r\n                <p>Available from:</p>\r\n                <input ref={textInput} value={availableFrom} onChange={event => changeAvFrom(event.target.value, props.identifier, event.target.value)} type=\"date\" className=\"available-from\" name=\"available-from\"\r\n                    min=\"2021-02-01\" max=\"2030-12-31\"></input>\r\n                    \r\n                <p>Available to:</p>\r\n                <input value={availableTo} onChange={event => changeAvTo(event.target.value, props.identifier, event.target.value)} type=\"date\" className=\"available-to\" name=\"available-to\"\r\n                    min=\"2021-02-01\" max=\"2040-12-31\"></input>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    //Add another availability element   \r\n    const onAddAvailabilityClick = event => {\r\n        const newAvailability = <Availability identifier={availabilityList.length} key={availabilityList.length}/>\r\n        availabilityList = [...availabilityList, newAvailability]\r\n        setAvailabilityList(availabilityList);\r\n        addAvailabilityToArr(\"test\", \"test\")\r\n        \r\n    };\r\n\r\n\r\n    /**\r\n     * @description This function sends application data (json format) to the server and handles the server response \r\n     * @param applicationData The data to send\r\n     */\r\n    function sendApplication(applicationData) {\r\n        //Add applicant info here?\r\n        let application =  applicationData;\r\n\r\n        console.log(\"Sending application: \" + application)\r\n        // /application?\r\n        fetch('/post', {\r\n            method: 'POST', \r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(application)\r\n        }).then(response => {\r\n            console.log(response)  \r\n    \r\n            //If something went wrong with saving application\r\n            if(response.status === 500) {   // internal error\r\n                console.log(\"internal error\")\r\n            } \r\n            else if(response.status === 200) {    \r\n                console.log(\"Success\")\r\n            }\r\n            else if(response.status === 201) {    \r\n                console.log(\"Something else\")\r\n            }\r\n        })\r\n    }\r\n\r\n    //onClick function for sending application\r\n    /**\r\n     * @description Gathers data from user input and uses it to send application to server with the sendApplication function.\r\n     * \r\n     */\r\n    function onSendApplicationClick() {\r\n        //gather data\r\n        let applicationData = {competenceArray,availabilityArray};\r\n        console.log(applicationData);\r\n        sendApplication(applicationData);\r\n    }\r\n\r\n    return (\r\n        <div className=\"applicationpage\">\r\n            \r\n            <header className=\"applicationpage-header\"> {/* use the same header for every page so replace this?? */}\r\n                <p>Preliminary application page!</p>\r\n            </header>\r\n            \r\n            <div id=\"applicationpage-content\">    \r\n                <div id=\"competencies\">\r\n                    <h3>Competencies</h3>\r\n                    {/* Competence list goes here! */}\r\n                    {competenceList}\r\n                    <button  onClick={() => onAddCompetenceClick()}>Add competence</button>\r\n                </div>\r\n                <div id=\"availabilities\">\r\n                    {/*Make sure available-from is before available-to somehow*/}\r\n                    <h3>Availability</h3>\r\n                    {availabilityList}\r\n                    <button onClick={() => onAddAvailabilityClick()}>Add availability</button>\r\n                </div>\r\n\r\n                <div id=\"send-application\">\r\n                    <button onClick={() => onSendApplicationClick()}>Send application</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Applicationpage;",["24","25"],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":3,"column":8,"nodeType":"32","messageId":"33","endLine":3,"endColumn":16},{"ruleId":"26","replacedBy":"34"},{"ruleId":"28","replacedBy":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar",["36"],["37"],"no-global-assign","no-unsafe-negation"]